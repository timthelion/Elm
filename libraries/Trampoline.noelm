module Trampoline (Trampoline, trampoline)
       where

{-|

Support for trampolined recursion.

@docs Trampoline, trampoline

-}
import Native.Trampoline
import open Either

data Trampoline a = Trampoline (Either a (() -> Trampoline a))

{-|
Trampoline a recursive function.

Noelm does not have tail call optimization.  Therefore, it is necessary to trampoline recursive functions so as to not blow the stack.

Example usage:

    fac' : Int -> Int -> Trampoline Int
    fac' n acc = case n of
      0 -> Trampoline . Left <| acc
      _ -> Trampoline . Right <| \() -> fac' (n - 1) (acc * n)

    fac : Int -> Int
    fac n = trampoline (fac n 1)

-}
trampoline : Trampoline a -> a
trampoline = Native.Trampoline.trampoline
