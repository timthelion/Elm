import open Either
import open Trampoline

f n =
 if | n == 0 -> Done 0
    | otherwise -> Continue <| \_-> f (n - 1)

tmap: (a -> b) -> [a] -> [b] -> Int -> Trampoline [b]
tmap f xs r n =
 if | n == 100 -> Continue <| \_-> tmap f xs r 0
    | otherwise ->
     case xs of
      (x::xs') -> tmap f xs' (f x::r) (n + 1)
      [] -> Done <| reverse r

naiveMap: (a -> b) -> [a] -> [b]
naiveMap f xs =
 case xs of
  [] -> []
  (x::xs) -> f x :: naiveMap f xs

facT : Int -> Int -> Trampoline Int
facT n acc = if n <= 0
              then Done acc
              else Continue <| \() -> facT (n - 1) (n * acc)

fac : Int -> Int
fac n = trampoline <| facT n 0

main =
 flow down
  [asText <| trampoline <| f 30000
  --,asText <| fac 1000000000000
  ,asText <| head <| trampoline <| tmap (\n->n+1) [1..100] [] 0
  --,asText <| head <| naiveMap (\n->n+1) [1..1000000]
  ]